#–ú–æ–¥—É–ª–∏
import telebot
import pyowm
import sqlite3
from qrcode import make
from cv2 import imread
from os import remove
from pyzbar.pyzbar import decode
from random import choice, randint
from datetime import datetime as dt
#–§—É–Ω–∫—Ü–∏–∏
def log(id, command, datetime):
	db = sqlite3.connect('logs.db')
	sql = db.cursor()
	sql.execute("""CREATE TABLE IF NOT EXISTS users (
		id INT,
		command TEXT,
		datetime TEXT
	)""")
	db.commit()
	sql.execute(f"INSERT INTO users VALUES (?, ?, ?)", (id, command, datetime))
	db.commit()
#–¢–æ–∫–µ–Ω—ã –∏ –ø—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
owm = pyowm.OWM(API_key='', language = 'ru')
bot = telebot.TeleBot("")
#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboardmain = telebot.types.ReplyKeyboardMarkup(True)
keyboardmain.row("/–ø–æ–¥–±—Ä–æ—Å—å", "/–ø–∞—Ä–æ–ª—å", "/—Ä–∞—Å–∫–ª–∞–¥–∫–∞", "/—Å—Å—ã–ª–∫–∞", "/–ø–æ–≥–æ–¥–∞", "/QR")
keyboardtranslitlanguage = telebot.types.ReplyKeyboardMarkup(True, True)
keyboardtranslitlanguage.row("–†—É—Å—Å–∫–∏–π", "English")
keyboardqr = telebot.types.ReplyKeyboardMarkup(True, True)
keyboardqr.row("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "–°—á–∏—Ç–∞—Ç—å")
#–°–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=["–Ω–∞—á–∞—Ç—å", "–ø–æ–º–æ—â—å", "start", "help"])
def send_welcome(message):
    log(message.chat.id, message.text, dt.today())
    bot.reply_to(message, "C–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É - /flip, /–ø–æ–¥–±—Ä–æ—Å—å\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å - /password, /–ø–∞—Ä–æ–ª—å\n–ü–æ–º–µ–Ω—è—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É - /layout, /—Ä–∞—Å–∫–ª–∞–¥–∫–∞\n–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞ YouTube - /link, /—Å—Å—ã–ª–∫–∞\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É - /weather, /–ø–æ–≥–æ–¥–∞\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, —Å—á–∏—Ç–∞—Ç—å QR –∫–æ–¥ - /QR", reply_markup=keyboardmain)
#–ú–æ–Ω–µ—Ç–∫–∞
@bot.message_handler(commands=["flip", "–ø–æ–¥–±—Ä–æ—Å—å"])
def flip_coin(message):
	log(message.chat.id, message.text, dt.today())
	flip = choice([True, False])
	if flip == True:
		bot.reply_to(message, "–í—ã–ø–∞–ª –æ—Ä—ë–ª.")
	elif flip == False:
		bot.reply_to(message, "–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞.")
#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
@bot.message_handler(commands=["password", "–ø–∞—Ä–æ–ª—å"])
def password_count(message):
	log(message.chat.id, message.text, dt.today())
	bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 32.")
	bot.register_next_step_handler(message, generate_password)
def generate_password(message):
	if str(type(message.text)) == "<class 'str'>":
		letterg = "eyuioaEYUIOA"
		letters = "qwrtpsdfghjklzxcvbnmQWRTPSDFGHJKLZXCVBNM"
		sym = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
		num = "0123456789"
		password = ""
		try:
			int(message.text)
		except ValueError:
			bot.reply_to(message, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã üôà.")
		else:
			if int(message.text) > 0:
				if int(message.text) <= 32:
					for i in range(int(message.text)):
						if (i % 5 == 0) and (i != 0):
							password += sym[randint(0, len(sym) - 1)]
						elif i % 2 == 0:
							password += letters[randint(0, len(letters) - 1)]
						elif i % 3 == 0:
							password += num[randint(0, len(num) - 1)]
						else:
							password += letterg[randint(0, len(letterg) - 1)]
					bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ:")
					bot.send_message(message.chat.id, password)
				else:
					bot.reply_to(message, '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ üôà.')
			else:
				bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ üôà.")
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
#–†–∞—Å–∫–ª–∞–¥–∫–∞
@bot.message_handler(commands=["layout", "—Ä–∞—Å–∫–ª–∞–¥–∫–∞"])
def choose_language(message):
	log(message.chat.id, message.text, dt.today())
	bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É.", reply_markup=keyboardtranslitlanguage)
	bot.register_next_step_handler(message, incorrect_text)
def incorrect_text(message):
	if str(type(message.text)) == "<class 'str'>":
		global language
		language = message.text
		if language == '–†—É—Å—Å–∫–∏–π':
			bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
			bot.register_next_step_handler(message, retranslit)
		elif language == 'English':
			bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
			bot.register_next_step_handler(message, retranslit)
		else:
			bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∞.")
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
def retranslit(message):
	if str(type(message.text)) == "<class 'str'>":
		resmessage = ""
		ru = "—ë1234567890-=–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç\\—è—á—Å–º–∏—Ç—å–±—é.–Å!\"‚Ññ;%:?*()_+–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠/–Ø–ß–°–ú–ò–¢–¨–ë–Æ, \n"
		en = "`1234567890-=qwertyuiop[]asdfghjkl;'\\zxcvbnm,./~!@#$%^&*()_+QWERTYUIOP{}ASDFGHJKL:\"|ZXCVBNM<>? \n"
		for i in message.text:
			if language.startswith("—Ä—É") == True:
				try:
					resmessage += en[ru.index(i)]
				except ValueError:
					resmessage += i
			else:
				try:
					resmessage += ru[en.index(i)]
				except ValueError:
					resmessage += i
		bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ:\n")
		bot.send_message(message.chat.id, resmessage)
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
#–ü–µ—Ä–µ–≤–æ–¥ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
@bot.message_handler(commands=["—Å—Å—ã–ª–∫–∞", "link"])
def link_read(message):
	log(message.chat.id, message.text, dt.today())
	bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫.")
	bot.register_next_step_handler(message, link_generator)
def link_generator(message):
	if str(type(message.text)) == "<class 'str'>":
		if message.text.startswith("https://www.") == True:
			link = copy_to_len(message.text, ".")
			if link.startswith("youtube.com") == True:
				bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ:")
				bot.send_message(message.chat.id, generate_link(link, "https://www."))
			else:
				bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –¥–æ–º–µ–Ω üôà.")
		elif message.text.startswith("www.") == True:
			link = copy_to_len(message.text, ".")
			if link.startswith("youtube.com") == True:
				bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ:")
				bot.send_message(message.chat.id, generate_link(link, "www."))
			else:
				bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –¥–æ–º–µ–Ω üôà.")
		elif message.text.startswith("https://") == True:
			link = copy_to_len(message.text, "/", 2)
			if link.startswith("youtube.com") == True:
				bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ:")
				bot.send_message(message.chat.id, generate_link(link, "https://"))
			else:
				bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –¥–æ–º–µ–Ω üôà.")
		else:
			bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ üôà.")
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
def copy_to_len(string, sym, pos = 1):
	num = 0
	resstr = ""
	for i in string:
		if num == pos:
			resstr += i
		else:
			if i == sym:
				num += 1
	return resstr
def generate_link(domain, proto):
	domain = proto + "ss" + domain
	return domain
#–ü–æ–≥–æ–¥–∞
@bot.message_handler(commands=['weather', '–ø–æ–≥–æ–¥–∞'])
def weather_answer(message):
	log(message.chat.id, message.text, dt.today())
	bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç.')
	bot.register_next_step_handler(message, weather_choose_city)
def weather_choose_city(message):
	if str(type(message.text)) == "<class 'str'>":
		city = message.text
		try:
			observation = owm.weather_at_place(city)
		except pyowm.exceptions.api_response_error.NotFoundError:
			bot.reply_to(message, '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç üôà.')
		else:
			weather = observation.get_weather()
			status = weather.get_status()
			temperature = weather.get_temperature('celsius')['temp']
			wind = weather.get_wind('meters_sec')['speed']
			humidity = weather.get_humidity()
			if status == 'Clouds':
				status = '–æ–±–ª–∞—á–Ω–æ'
			elif status == 'Clear':
				status = '—è—Å–Ω–æ'
			elif status == 'Rain':
				status = '–∏–¥—ë—Ç –¥–æ–∂–¥—å'
			elif status == 'Snow':
				status = '–∏–¥—ë—Ç —Å–Ω–µ–≥'
			bot.send_message(message.chat.id, '–ü–æ–≥–æ–¥–∞ –≤ ' + city + ':\n–°–µ–π—á–∞—Å ' + status + '.\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ' + str(temperature) + ' ¬∞C.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ' + str(wind) + ' –º/—Å.\n–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ' + str(humidity) + ' %.')
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
#QR –∫–æ–¥
@bot.message_handler(commands=['QR'])
def qr_answer(message):
	log(message.chat.id, message.text, dt.today())
	bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=keyboardqr)
	bot.register_next_step_handler(message, qr_choice)
def qr_choice(message):
	if str(type(message.text)) == "<class 'str'>":
		if message.text == '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
			bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ –±–æ–ª–µ–µ 256 —Å–∏–º–≤–æ–ª–æ–≤.')
			bot.register_next_step_handler(message, qr_generate)
		elif message.text == '–°—á–∏—Ç–∞—Ç—å':
			bot.send_message(message.chat.id, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR –∫–æ–¥–æ–º.')
			bot.register_next_step_handler(message, qr_read)
		else:
			bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ üôà.')
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
def qr_generate(message):
	if str(type(message.text)) == "<class 'str'>":
		if len(message.text) <= 256:
			image = make(message.text)
			image.save('qrcode.png')
			byte = open('qrcode.png', 'rb')
			bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ:')
			bot.send_photo(message.chat.id, byte)
			byte.close()
			remove('qrcode.png')
		else:
			bot.reply_to(message, '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ üôà.')
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
def qr_read(message):
	if str(type(message.photo)) == "<class 'list'>":
		info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
		byte = bot.download_file(info.file_path)
		with open('qrread.png', 'wb') as image:
			image.write(byte)
		image = imread('qrread.png')
		barcodes = decode(image)
		for barcode in barcodes:
			barcodeData = barcode.data.decode('utf-8')
		try:
			type(barcodeData)
		except UnboundLocalError:
			bot.reply_to(message, '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR –∫–æ–¥ üôà.')
		else:
			bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ:')
			bot.send_message(message.chat.id, barcodeData)
		remove('qrread.png')
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
#–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç
@bot.message_handler(content_types=["text"])
def answer(message):
	bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª üòï.\n–ù–∞–ø–∏—à–∏—Ç–µ \"/–ø–æ–º–æ—â—å\", —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")
bot.polling()
